// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  username          String              @unique
  email             String              @unique
  password          String
  roleId            String
  createdAt         DateTime            @default(now())

  configurationData ConfigurationData[]
  updatedWorkflows         Workflow[]          @relation("WorkflowUpdatedBy")
  updatedConfigurationData ConfigurationData[] @relation("ConfigUpdatedBy")

  role     Role       @relation(fields: [roleId], references: [id])
  workflow Workflow[]
  testBatch TestBatch[]

  @@index([roleId])
  @@index([createdAt])
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model Workflow {
  id          String         @id @default(uuid())
  name        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  
  description String?
  status      Status         @default(DRAFT)

  userId      String
  user        User           @relation(fields: [userId], references: [id])
  
  updatedId String?
  updatedBy User? @relation("WorkflowUpdatedBy", fields: [updatedId], references: [id])

  xmlContent  String?
  jsonContent Json?

  workflowNode WorkflowNode[]
  testCases    TestCase[]

  results     Result[]   // üîπ back-relation

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Project {
  id         String   @id @default(uuid())
  name       String
  description String

  workflows Workflow[]
}

model WorkflowNode {
  id         String   @id @default(uuid())
  nodeId     String
  workflowId String
  name       String?
  workflow   Workflow @relation(fields: [workflowId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  configurationData ConfigurationData[]

  testCaseNodes TestCaseNode[] // Kh√¥ng c·∫ßn ƒë·∫∑t t√™n relation

  results     Result[]   // üîπ back-relation

  @@unique([workflowId, nodeId])
  @@index([workflowId])
  @@index([nodeId])
  @@index([createdAt])
}

model ConfigurationData {
  id             String   @id @default(uuid())
  workflowNodeId String
  description    String?
  data           Json?
  formatData     Json?
  attachments    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  user         User         @relation(fields: [userId], references: [id])

  updatedId String?
  updatedBy User? @relation("ConfigUpdatedBy", fields: [updatedId], references: [id])

  workflowNode WorkflowNode @relation(fields: [workflowNodeId], references: [id])

  @@unique([workflowNodeId, userId])
  @@index([workflowNodeId])
  @@index([userId])
  @@index([createdAt])
}

model TestBatch {
  id        String     @id @default(uuid())
  name      String?
  description String?
  createdAt DateTime   @default(now())
  scenarios Scenario[] // M·ªôt batch ch·ª©a nhi·ªÅu scenario
  updatedAt DateTime   @updatedAt

  userId String 
  user        User           @relation(fields: [userId], references: [id])

  results     Result[]   // üîπ back-relation

  @@index([createdAt])
}

model Scenario {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  testBatchId String? // Kh√≥a ngo·∫°i li√™n k·∫øt t·ªõi TestBatch

  testBatch TestBatch? @relation(fields: [testBatchId], references: [id], onDelete: Cascade)
  testCases TestCase[] // M·ªôt Scenario ch·ª©a nhi·ªÅu TestCase

  results     Result[]   // üîπ back-relation

  @@index([testBatchId])
  @@index([createdAt])
}

model TestCase {
  id        String   @id @default(uuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scenarioId String? // Kh√≥a ngo·∫°i li√™n k·∫øt t·ªõi Scenario
  scenario   Scenario? @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  results     Result[]   // üîπ back-relation

  testCaseNodes TestCaseNode[]

  @@index([workflowId])
  @@index([scenarioId])
  @@index([createdAt])
}

model TestCaseNode {
  id              String    @id @default(uuid())
  inputParam      Json?
  formatParam     Json?
  expectation     Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  resultReceiveAt DateTime?
  name            String?

  results     Result[]   // üîπ back-relation

  testCaseId String
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  workflowNodeId String
  workflowNode   WorkflowNode @relation(fields: [workflowNodeId], references: [id], onDelete: Cascade)

  @@unique([testCaseId, workflowNodeId])
  @@index([testCaseId])
  @@index([workflowNodeId])
  @@index([createdAt])
  @@index([resultReceiveAt])
}

model Result {
  id             String         @id @default(uuid()) // th√™m id cho d·ªÖ qu·∫£n l√Ω
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // ===== C√°c kho√° ngo·∫°i =====
  testBatchId    String
  testBatch      TestBatch      @relation(fields: [testBatchId], references: [id])

  scenarioId     String
  scenario       Scenario       @relation(fields: [scenarioId], references: [id])

  testCaseId     String
  testCase       TestCase       @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  testCaseNodeId String
  testCaseNode   TestCaseNode   @relation(fields: [testCaseNodeId], references: [id])

  workflowId     String
  workflow       Workflow       @relation(fields: [workflowId], references: [id])

  workflowNodeId String
  workflowNode   WorkflowNode   @relation(fields: [workflowNodeId], references: [id])

  // ===== D·ªØ li·ªáu k·∫øt qu·∫£ =====
  result         Json?

  @@index([testBatchId])
  @@index([scenarioId])
  @@index([testCaseId])
  @@index([testCaseNodeId])
  @@index([workflowId])
  @@index([workflowNodeId])
}


model AppLog {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  message       String   @db.Text
  level         LogLevel @default(INFO)
  context       Json? // payload/error stack b·∫•t k·ª≥
  correlationId String? // group theo 1 request/flow
  source        String? // api/worker/n8n...

  @@index([createdAt])
  @@index([level, createdAt])
  @@index([correlationId])
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum Status {
  DRAFT
  SUBMITTED
  DONE
  CANCELLED
}
